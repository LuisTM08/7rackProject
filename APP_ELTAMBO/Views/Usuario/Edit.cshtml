@model APP_ELTAMBO.Entity.Usuario

@{
    ViewBag.Title = "Actualizar Usuario";
    var codRegion = 0;
    var codProvincia = 0;
    var codDistrito = 0;
    var emailUser = "";
    var avatarUser = "";
    if (IsPost) {
        codRegion = ViewBag.getIDRegion;
        codProvincia = ViewBag.getIDProvincia;
        codDistrito = ViewBag.getIDDistrito;
        emailUser = ViewBag.getEmail;
        avatarUser = ViewBag.getImage;
    } else
    {
        codRegion = Model.IdRegion;
        codProvincia = Model.IdProvincia;
        codDistrito = Model.IdDistrito;
        emailUser = Model.Email.ToString();
        avatarUser = ViewBag.getImage;
    }

}

@using (Html.BeginForm("Edit","Usuario",FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-3">
                @Html.Partial("_MenuAdmin")
            </div>
            <div class="col-md-9">
                <div class="page-header">
                    <h2>Actualizar Usuario</h2>
                </div>
                <div class="alert alert-info" role="alert">
                    <p>Por favor completa los datos solicitados para hacer tus compras, recuerde ingresar una dirección valida</p>
                </div>
                
                <div class="row">
                    <div class="col-md-7">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.HiddenFor(model => model.IdLogin)
                                @Html.HiddenFor(model => model.IdUsuario)
                                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.TextBox("Email",@emailUser, new { @class ="form-control", @disabled="disabled"} )
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DNI, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.DNI, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DNI, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Sexo, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("Sexo", (SelectList)ViewBag.listarSexo,"Seleccione Sexo", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Sexo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Telefono, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Telefono, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Telefono, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FechaNacimiento, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.FechaNacimiento, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FechaNacimiento, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Direccion, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Direccion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Direccion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Referencia, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.Referencia, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Referencia, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IdRegion, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("IdRegion", (SelectList)ViewBag.listarRegion,"Seleccione Region", new { @class = "form-control", @onchange = "listarProvincias()" })
                                @Html.ValidationMessageFor(model => model.IdRegion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IdProvincia, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("IdProvincia", new SelectList(Enumerable.Empty<SelectListItem>(), "IdProvincia", "NombreProvincia"),"Seleccione Provincia", new { @class = "form-control", @onchange = "listarDistritos()" })
                                @Html.ValidationMessageFor(model => model.IdProvincia, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.IdDistrito, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.DropDownList("IdDistrito", new SelectList(Enumerable.Empty<SelectListItem>(), "IdDistrito", "NombreDistrito"),"Seleccione Distrito", new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.IdDistrito, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class=" col-md-offset-3 col-md-9">
                                <a href="@Url.Action("Index","Usuario")" class="btn btn-default">
                                    <i class="fa fa-arrow-left" aria-hidden="true"></i> Regresar a lista
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fa fa-floppy-o" aria-hidden="true"></i> Actualizar Perfil
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <figure class="picture">
                            <img src="@avatarUser" id="imgAvatar" class="img-thumbnail" alt="" width="180" height="180">
                        </figure>
                        <div class="form-group">
                                @Html.TextBox("Avatar", "", null, new { @type = "file", @onchange="cargarImagen()" })
                                <input type="hidden" id="x" name="x" />
                                <input type="hidden" id="y" name="y" />
                                <input type="hidden" id="w" name="w" />
                                <input type="hidden" id="h" name="h" />
                        </div>
                        <div class="panel-image">
                            <div class="preview-image">
                                <img id="img-preview" class="crop" />
                            </div>
                            <div id="msg-error" class="alert alert-warning"></div>
                        </div>
                        <div id="actions-crop" class="action-toolbars" style="display:none;">
                            <button type="button" id="subirImagen" class="btn btn-default">
                                <i class="fa fa-crop" aria-hidden="true"></i>
                                    Recortar y subir imagen
                            </button>
                        </div>
                    </div>
                </div>
            </div> 
            
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function(){
        $('#FechaNacimiento').datepicker({
            format: "yyyy-mm-dd",
            language: "es"
        });

        var oRegion = @codRegion;
        var oProvincia = @codProvincia;
        var oDistrito = @codDistrito;

        listarProvincias(oRegion, oProvincia);
        listarDistritos(oProvincia, oDistrito);

    });
    $( "#IdRegion" ).change(function() {
        $("#IdDistrito").empty();
        $("#IdDistrito").append($('<option>', { value:"0", text: "Seleccione Distrito" }));
    });
    function listarProvincias(x, y) {
        var IdRegion;
        var oProv;
        if(x == null){
            IdRegion = $('#IdRegion').val();
        } else {
            IdRegion = x;
        }
        
        $.ajax({
            url: '/Usuario/buscarProvincia',
            type: "GET",
            dataType: "JSON",
            data: { region: IdRegion },
            success: function (provincias) {
                $("#IdProvincia").empty(); // clear before appending new list
                $("#IdProvincia").append($('<option>', { value:"0", text: "Seleccione Provincia" }));
                $.each(provincias, function (i, provincia) {
                    $("#IdProvincia").append($('<option>', { value: String(provincia.codProvincia), text: provincia.NombreProvincia }));
                });
                if(y !== 0){
                    itemCurrent = y
                } else {
                    itemCurrent = 0;
                }
                $("#IdProvincia").val(itemCurrent.toString()).find("option[value=" + itemCurrent.toString() + "]").attr('selected',true);
            }
        });

    }
    function listarDistritos(x, y) {
        if(x == null){
            var idProvincia = $('#IdProvincia').val();
        } else {
            idProvincia = x;
        }
        $.ajax({
            url: '/Usuario/buscarDistrito',
            type: "GET",
            dataType: "JSON",
            data: { provincia: idProvincia },
            success: function (distritos) {
                $("#IdDistrito").empty(); // clear before appending new list
                $("#IdDistrito").append($('<option>', { value:"0", text: "Seleccione Distrito" }));
                $.each(distritos, function (i, distrito) {
                    $("#IdDistrito").append($('<option></option>').val(distrito.IdDistrito).html(distrito.NombreDistrito));
                });
                if(y !== 0){
                    itemCurrent = y
                } else {
                    itemCurrent = 0;
                }
                $("#IdDistrito").val(itemCurrent.toString()).find("option[value=" + itemCurrent.toString() + "]").attr('selected',true);
            }
        });
    }

    //Jcrop

    function readURL() {
        //colocamos el archivo carfado en una variable
        var oFile = $("#Avatar")[0].files[0];
        
        $("#actions-crop").css("display","block");

        if (oFile) {
            
            var oReader = new FileReader();
            var rFilter = /^(image\/jpeg|image\/png)$/i;
            
            if (!rFilter.test(oFile.type)) {
                $('#msg-error').html('Por favor seleccione un archivo valido JPG o PNG').show();
                return;
            }
            if(oFile){
                if(window.FormData !== undefined){
                    var userID = $("#IdLogin").val();
                    var formData = new FormData();
                    formData.append("file", oFile);
                    formData.append("userIDLogin", userID);
                    $.ajax({
                        type : "POST",
                        url : '/Usuario/Upload',
                        contentType : false,
                        processData : false,
                        data : formData,
                        success : function (result){
                            NombreImagen=result
                        },
                        error: function(xhr){
                            console.log(xhr.responseText);
                        }
                    });
                } else{
                    alert("Error al subir imagen");
                }
            }
            // Chequear el tamaño de la imagen
            if (oFile.size > 1024 * 1024) {
                $('#msg-error').html('Solo se permite subir imagenes menor a 2,5 MB').show();
                return;
            }
            var oImagen = document.getElementById('img-preview');

            oReader.onload = function (e) {
                oImagen.src = e.target.result;
                oImagen.onload = function () {
                    // Eliminar el Jcrop si este Existe
                    if (typeof jcrop_api != 'undefined') {
                        jcrop_api.destroy();
                        jcrop_api = null;
                    }
                    $('#img-preview').Jcrop({
                        minSize: [32, 32], // min crop size
                        onSelect: updateCoords,
                        bgOpacity: .4,
                        setSelect: [100, 100, 50, 50],
                        aspectRatio: 1,
                        boxWidth: 300
                    },function(){
                        jcrop_api = this;
                    });
                }; 
            }
            oReader.readAsDataURL(oFile);
        }
    }
    $('#subirImagen').on("click",function(e){
        e.preventDefault();
        cropImagen();
    });
    
    function cargarImagen() {
        readURL();
    }

    function updateCoords(c) {
        $('#x').val(c.x);
        $('#y').val(c.y);
        $('#w').val(c.w);
        $('#h').val(c.h);
    };
    function cropImagen(){
        var imgX = $("#x").val();
        var imgY = $("#y").val();
        var imgW = $("#w").val();
        var imgH = $("#h").val();
        var userID = $("#IdLogin").val();
        /* console.log("Cord Y : " + Math.round(imgY));
        console.log("Cord X : " + Math.round(imgX));
        console.log("Cord W : " + Math.round(imgW));
        console.log("Cord H : " + Math.round(imgH)); */

        var img = {
            'CorX' : Math.round(imgX),
            'CorY' : Math.round(imgY),
            'CorW' : Math.round(imgW),
            'CorH' : Math.round(imgH),
            NombreImagen,
            userID
        }
        $.ajax({
            type : "POST",
            url : '/Usuario/Crop',
            contentType: "application/json; charset=utf-8",
            processData: false,
            data : JSON.stringify(img),
            success : function(result){
                //console.log(result);
                //alert(result);
                $fileupload = $('#Avatar');
                $fileupload.replaceWith($fileupload.clone(true));
                $("#imgAvatar").attr('src',result);
                //location.reload();
            },
            error : function (xhr){
                console.log(xhr.responseText);
            }
        });
    }
</script>
}
